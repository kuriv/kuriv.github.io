<?php

declare(strict_types = 1);

/*
|----------------------------------------------------------------------
| abs
|----------------------------------------------------------------------
|
| Returns the absolute value of number.
|
*/

$abs = abs(-4.2); // $abs = 4.2;
$abs = abs(5);    // $abs = 5;
$abs = abs(-5);   // $abs = 5;

/*
|----------------------------------------------------------------------
| acos
|----------------------------------------------------------------------
|
| Returns the arc cosine of the variable in radians.
|
*/

$acos = acos(0.64); // $acos = 0.87629806116834;
$acos = acos(0);    // $acos = 1.5707963267949;
$acos = acos(1);    // $acos = 0;

/*
|----------------------------------------------------------------------
| acosh
|----------------------------------------------------------------------
|
| Returns the inverse hyperbolic cosine of the variable.
|
*/

$acosh = acosh(1);  // $acosh = 0;
$acosh = acosh(10); // $acosh = 2.9932228461264;
$acosh = acosh(20); // $acosh = 3.6882538673613;

/*
|----------------------------------------------------------------------
| asin
|----------------------------------------------------------------------
|
| Returns the arc sine of the variable in radians.
|
*/

$asin = asin(0.64); // $asin = 0.69449826562656;
$asin = asin(0);    // $asin = 0;
$asin = asin(1);    // $asin = 1.5707963267949;

/*
|----------------------------------------------------------------------
| asinh
|----------------------------------------------------------------------
|
| Returns the inverse hyperbolic sine of the variable.
|
*/

$asinh = asinh(-1); // $asinh = -0.88137358701954;
$asinh = asinh(0);  // $asinh = 0;
$asinh = asinh(1);  // $asinh = 0.88137358701954;

/*
|----------------------------------------------------------------------
| atan2
|----------------------------------------------------------------------
|
| Returns the arc tangent of the two variables in radians.
|
*/

$atan2 = atan2(0.5, 0.5);   // $atan2 = 0.78539816339745;
$atan2 = atan2(-0.5, -0.5); // $atan2 = -2.3561944901923;
$atan2 = atan2(10, 20);     // $atan2 = 0.46364760900081;

/*
|----------------------------------------------------------------------
| atan
|----------------------------------------------------------------------
|
| Returns the arc tangent of the variable in radians.
|
*/

$atan = atan(0.5);  // $atan = 0.46364760900081;
$atan = atan(5);    // $atan = 1.373400766945;
$atan = atan(10);   // $atan = 1.4711276743037;

/*
|----------------------------------------------------------------------
| atanh
|----------------------------------------------------------------------
|
| Returns the inverse hyperbolic tangent of variable.
|
*/

$atanh = atanh(-0.5); // $atanh = -0.54930614433405;
$atanh = atanh(0);    // $atanh = 0;
$atanh = atanh(0.5);  // $atanh = 0.54930614433405;

/*
|----------------------------------------------------------------------
| base_convert
|----------------------------------------------------------------------
|
| Convert a number between arbitrary bases.
|
*/

$base_convert = base_convert('11', 2, 10);     // $base_convert = '3';
$base_convert = base_convert('0031', 8, 10);   // $base_convert = '25';
$base_convert = base_convert('A37334', 16, 2); // $base_convert = '101000110111001100110100';

/*
|----------------------------------------------------------------------
| bindec
|----------------------------------------------------------------------
|
| Binary to decimal.
|
*/

$bindec = bindec(11);     // $bindec = 3;
$bindec = bindec(110011); // $bindec = 51;
$bindec = bindec(111111); // $bindec = 63;

/*
|----------------------------------------------------------------------
| ceil
|----------------------------------------------------------------------
|
| Returns the next highest integer by rounding up if necessary.
|
*/

$ceil = ceil(4.3);   // $ceil = 5;
$ceil = ceil(9.999); // $ceil = 10;
$ceil = ceil(-3.14); // $ceil = -3;

/*
|----------------------------------------------------------------------
| cos
|----------------------------------------------------------------------
|
| Returns the cosine of the variable.
|
*/

$cos = cos(0);    // $cos = 1;
$cos = cos(3);    // $cos = -0.98999249660045;
$cos = cos(M_PI); // $cos = -1;

/*
|----------------------------------------------------------------------
| cosh
|----------------------------------------------------------------------
|
| Returns the hyperbolic cosine of the variable.
|
*/

$cosh = cosh(0);    // $cosh = 1;
$cosh = cosh(3);    // $cosh = 10.067661995778;
$cosh = cosh(M_PI); // $cosh = 11.591953275522;

/*
|----------------------------------------------------------------------
| decbin
|----------------------------------------------------------------------
|
| Decimal to binary.
|
*/

$decbin = decbin(11); // $decbin = '1011';
$decbin = decbin(12); // $decbin = '1100';
$decbin = decbin(26); // $decbin = '11010';

/*
|----------------------------------------------------------------------
| dechex
|----------------------------------------------------------------------
|
| Decimal to hexadecimal.
|
*/

$dechex = dechex(10);  // $dechex = 'a';
$dechex = dechex(47);  // $dechex = '2f';
$dechex = dechex(100); // $dechex = '64';

/*
|----------------------------------------------------------------------
| decoct
|----------------------------------------------------------------------
|
| Decimal to octal.
|
*/

$decoct = decoct(15);  // $decoct = '17';
$decoct = decoct(100); // $decoct = '144';
$decoct = decoct(264); // $decoct = '410';

/*
|----------------------------------------------------------------------
| deg2rad
|----------------------------------------------------------------------
|
| Converts the number in degrees to the radian equivalent.
|
*/

$deg2rad = deg2rad(30); // $deg2rad = 0.5235987755983;
$deg2rad = deg2rad(45); // $deg2rad = 0.78539816339745;
$deg2rad = deg2rad(90); // $deg2rad = 1.5707963267949;

/*
|----------------------------------------------------------------------
| exp
|----------------------------------------------------------------------
|
| Calculates the exponent of e.
|
*/

$exp = exp(0);   // $exp = 1;
$exp = exp(5.7); // $exp = 298.86740096706;
$exp = exp(12);  // $exp = 162754.791419;

/*
|----------------------------------------------------------------------
| expm1
|----------------------------------------------------------------------
|
| Returns exp(number) - 1.
|
*/

$expm1 = expm1(0);   // $expm1 = 0;
$expm1 = expm1(5.7); // $expm1 = 297.86740096706
$expm1 = expm1(12);  // $expm1 = 162753.791419

/*
|----------------------------------------------------------------------
| floor
|----------------------------------------------------------------------
|
| Returns the next lowest integer by rounding down if necessary.
|
*/

$floor = floor(-3.14); // $floor = -4;
$floor = floor(9.999); // $floor = 9;
$floor = floor(4.3);   // $floor = 4;

/*
|----------------------------------------------------------------------
| fmod
|----------------------------------------------------------------------
|
| Returns the floating point remainder of the division of the variable.
|
*/

$fmod = fmod(-10, 3);   // $fmod = -1;
$fmod = fmod(5, 2);     // $fmod = 1;
$fmod = fmod(5.7, 1.3); // $fmod = 0.5;

/*
|----------------------------------------------------------------------
| getrandmax
|----------------------------------------------------------------------
|
| Show the largest possible random value.
|
*/

$getrandmax = getrandmax(); // $getrandmax = 2147483647;

/*
|----------------------------------------------------------------------
| hexdec
|----------------------------------------------------------------------
|
| Hexadecimal to decimal.
|
*/

$hexdec = hexdec('a');  // $hexdec = 10;
$hexdec = hexdec('a0'); // $hexdec = 160;
$hexdec = hexdec('ee'); // $hexdec = 238;

/*
|----------------------------------------------------------------------
| hypot
|----------------------------------------------------------------------
|
| Calculate the length of the hypotenuse of a right-angle triangle.
|
*/

$hypot = hypot(1, 3); // $hypot = 3.1622776601684;
$hypot = hypot(2, 3); // $hypot = 3.605551275464;
$hypot = hypot(3, 6); // $hypot = 6.7082039324994;

/*
|----------------------------------------------------------------------
| intdiv
|----------------------------------------------------------------------
|
| Returns the integer quotient of the division of dividend by divisor.
|
*/

$intdiv = intdiv(-3, -2); // $intdiv = 1;
$intdiv = intdiv(-3, 2);  // $intdiv = -1;
$intdiv = intdiv(3, 2);   // $intdiv = 1;

/*
|----------------------------------------------------------------------
| is_finite
|----------------------------------------------------------------------
|
| Finds whether a value is a legal finite number.
|
*/

$is_finite = is_finite(2);      // $is_finite = true;
$is_finite = is_finite(log(0)); // $is_finite = false;
$is_finite = is_finite(100);    // $is_finite = true;

/*
|----------------------------------------------------------------------
| is_infinite
|----------------------------------------------------------------------
|
| Finds whether a value is infinite.
|
*/

$is_infinite = is_infinite(2);      // $is_infinite = false;
$is_infinite = is_infinite(log(0)); // $is_infinite = true;
$is_infinite = is_infinite(100);    // $is_infinite = false;

/*
|----------------------------------------------------------------------
| is_nan
|----------------------------------------------------------------------
|
| Finds whether a value is not a number.
|
*/

$is_nan = is_nan(0);       // $is_nan = false;
$is_nan = is_nan(1);       // $is_nan = false;
$is_nan = is_nan(acos(8)); // $is_nan = true;

/*
|----------------------------------------------------------------------
| lcg_value
|----------------------------------------------------------------------
|
| Returns a pseudo random number in the range of (0, 1).
|
*/

$lcg_value = lcg_value(); // $lcg_value = 0 ~ 1;

/*
|----------------------------------------------------------------------
| log10
|----------------------------------------------------------------------
|
| Returns the base-10 logarithm of the variable.
|
*/

$log10 = log10(1);      // $log10 = 0;
$log10 = log10(2);      // $log10 = 0.30102999566398;
$log10 = log10(2.7183); // $log10 = 0.43429738512451;

/*
|----------------------------------------------------------------------
| log1p
|----------------------------------------------------------------------
|
| Returns log(1 + number).
|
*/

$log1p = log1p(0); // $log1p = 0;
$log1p = log1p(1); // $log1p = 0.69314718055995;
$log1p = log1p(2); // $log1p = 1.0986122886681;

/*
|----------------------------------------------------------------------
| log
|----------------------------------------------------------------------
|
| Returns the natural logarithm.
|
*/

$log = log(1); // $log = 1;
$log = log(2); // $log = 0.69314718055995;
$log = log(3); // $log = 1.0986122886681;

/*
|----------------------------------------------------------------------
| max
|----------------------------------------------------------------------
|
| Find the highest value.
|
*/

$max = max(1, 3, 5, 6, 7);           // $max = 7;
$max = max([2, 4, 5]);               // $max = 5;
$max = max('hello', 0);              // $max = 'hello';
$max = max(0, 'hello');              // $max = 0;
$max = max('42', 3);                 // $max = '42';
$max = max([2, 4, 8], [2, 5, 7]);    // $max = [2, 5, 7];
$max = max([2, 2, 2], [1, 1, 1, 1]); // $max = [1, 1, 1, 1];
$max = max('hello', [2, 5, 7], 42);  // $max = [2, 5, 7];

/*
|----------------------------------------------------------------------
| min
|----------------------------------------------------------------------
|
| Find the lowest value.
|
*/

$min = min(2, 3, 1, 6, 7);           // $min = 1;
$min = min([2, 4, 5]);               // $min = 2;
$min = min('hello', 0);              // $min = hello;
$min = min(0, 'hello');              // $min = 0;
$min = min('42', -1);                // $min = -1;
$min = min([2, 4, 8], [2, 5, 1]);    // $min = [2, 4, 8];
$min = min([2, 2, 2], [2, 1, 1, 1]); // $min = [2, 2, 2];
$min = min('hello', [2, 5, 7], 42);  // $min = 'hello';

/*
|----------------------------------------------------------------------
| mt_getrandmax
|----------------------------------------------------------------------
|
| Show the largest possible random value.
|
*/

$mt_getrandmax = mt_getrandmax(); // $mt_getrandmax = 2147483647;

/*
|----------------------------------------------------------------------
| mt_rand
|----------------------------------------------------------------------
|
| Generate a better random integer.
|
*/

$mt_rand = mt_rand();      // $mt_rand = 0 ~ mt_getrandmax();
$mt_rand = mt_rand(5, 15); // $mt_rand = 5 ~ 15;

/*
|----------------------------------------------------------------------
| mt_srand
|----------------------------------------------------------------------
|
| Sowing a better random number generator seed.
|
*/

mt_srand(intval(microtime(true) * 10000)); //

/*
|----------------------------------------------------------------------
| octdec
|----------------------------------------------------------------------
|
| Octal to decimal.
|
*/

$octdec = octdec(77);  // $octdec = 63;
$octdec = octdec(100); // $octdec = 64;
$octdec = octdec(777); // $octdec = 511;

/*
|----------------------------------------------------------------------
| pi
|----------------------------------------------------------------------
|
| Returns the value of pi.
|
*/

$pi = pi(); // $pi = 3.1415926535898;
$pi = M_PI; // $pi = 3.1415926535898;

/*
|----------------------------------------------------------------------
| pow
|----------------------------------------------------------------------
|
| Returns the power of the exponential expression.
|
*/

$pow = pow(0, 0);   // $pow = 1;
$pow = pow(-1, 20); // $pow = 1;
$pow = pow(2, 8);   // $pow = 256;

/*
|----------------------------------------------------------------------
| rad2deg
|----------------------------------------------------------------------
|
| Converts the radian number to the equivalent number in degrees.
|
*/

$rad2deg = rad2deg(M_PI);            // $rad2deg = 180;
$rad2deg = rad2deg(0.5235987755983); // $rad2deg = 30;
$rad2deg = rad2deg(1.5707963267949); // $rad2deg = 90;

/*
|----------------------------------------------------------------------
| rand
|----------------------------------------------------------------------
|
| Generate a random integer.
|
*/

$rand = rand();      // $rand = 0 ~ getrandmax();
$rand = rand(5, 15); // $rand = 5 ~ 15;

/*
|----------------------------------------------------------------------
| round
|----------------------------------------------------------------------
|
| Rounds a float.
|
*/

$round = round(3.4);                         // $round = 3;
$round = round(3.5);                         // $round = 4;
$round = round(3.6, 0);                      // $round = 4;
$round = round(1.95583, 2);                  // $round = 1.96;
$round = round(1241757, -3);                 // $round = 1242000;
$round = round(9.5, 0, PHP_ROUND_HALF_UP);   // $round = 10;
$round = round(9.5, 0, PHP_ROUND_HALF_DOWN); // $round = 9;
$round = round(9.5, 0, PHP_ROUND_HALF_EVEN); // $round = 10;
$round = round(9.5, 0, PHP_ROUND_HALF_ODD);  // $round = 9;

/*
|----------------------------------------------------------------------
| sin
|----------------------------------------------------------------------
|
| Returns the sine of the variable.
|
*/

$sin = sin(-10); // $sin = 0.54402111088937;
$sin = sin(-1);  // $sin = -0.8414709848079;
$sin = sin(2);   // $sin = 0.90929742682568;

/*
|----------------------------------------------------------------------
| sinh
|----------------------------------------------------------------------
|
| Returns the hyperbolic sine of the variable.
|
*/

$sinh = sinh(-3); // $sinh = -10.01787492741;
$sinh = sinh(1);  // $sinh = 1.1752011936438;
$sinh = sinh(10); // $sinh = 11013.232874703;

/*
|----------------------------------------------------------------------
| sqrt
|----------------------------------------------------------------------
|
| Returns the square root of variable.
|
*/

$sqrt = sqrt(8);  // $sqrt = 2.8284271247462;
$sqrt = sqrt(9);  // $sqrt = 3;
$sqrt = sqrt(10); // $sqrt = 3.1622776601684;

/*
|----------------------------------------------------------------------
| srand
|----------------------------------------------------------------------
|
| Sowing a random number generator seed.
|
*/

srand(intval(microtime(true)  * 10000)); //

/*
|----------------------------------------------------------------------
| tan
|----------------------------------------------------------------------
|
| Returns the tangent of the variable.
|
*/

$tan = tan(-1); // $tan = -1.5574077246549;
$tan = tan(2);  // $tan = -2.1850398632615;
$tan = tan(10); // $tan = 0.64836082745909;

/*
|----------------------------------------------------------------------
| tanh
|----------------------------------------------------------------------
|
| Returns the hyperbolic tangent of the variable.
|
*/

$tanh = tanh(-1); // $tanh = -0.76159415595576;
$tanh = tanh(2);  // $tanh = 0.96402758007582;
$tanh = tanh(10); // $tanh = 0.99999999587769;
